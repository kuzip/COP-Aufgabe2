package SoseL21.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myPlusExpression__BehaviorDescriptor = new PlusExpression__BehaviorDescriptor();
  private final BHDescriptor myMinusExpression__BehaviorDescriptor = new MinusExpression__BehaviorDescriptor();
  private final BHDescriptor myMulExpression__BehaviorDescriptor = new MulExpression__BehaviorDescriptor();
  private final BHDescriptor myDivExpression__BehaviorDescriptor = new DivExpression__BehaviorDescriptor();
  private final BHDescriptor myBinaryExpression__BehaviorDescriptor = new BinaryExpression__BehaviorDescriptor();
  private final BHDescriptor myEqualsExpression__BehaviorDescriptor = new EqualsExpression__BehaviorDescriptor();
  private final BHDescriptor myNotEqualsExpression__BehaviorDescriptor = new NotEqualsExpression__BehaviorDescriptor();
  private final BHDescriptor myLessEqualsExpression__BehaviorDescriptor = new LessEqualsExpression__BehaviorDescriptor();
  private final BHDescriptor myGreaterWqualsExpression__BehaviorDescriptor = new GreaterWqualsExpression__BehaviorDescriptor();
  private final BHDescriptor myGreaterExpression__BehaviorDescriptor = new GreaterExpression__BehaviorDescriptor();
  private final BHDescriptor myLesserExpression__BehaviorDescriptor = new LesserExpression__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myBinaryExpression__BehaviorDescriptor;
      case 1:
        return myDivExpression__BehaviorDescriptor;
      case 2:
        return myEqualsExpression__BehaviorDescriptor;
      case 3:
        return myGreaterExpression__BehaviorDescriptor;
      case 4:
        return myGreaterWqualsExpression__BehaviorDescriptor;
      case 5:
        return myLessEqualsExpression__BehaviorDescriptor;
      case 6:
        return myLesserExpression__BehaviorDescriptor;
      case 7:
        return myMinusExpression__BehaviorDescriptor;
      case 8:
        return myMulExpression__BehaviorDescriptor;
      case 9:
        return myNotEqualsExpression__BehaviorDescriptor;
      case 10:
        return myPlusExpression__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xd37e68cc7f44d7cL, 0x9f193484afb67d84L, 0x5e0d8461f9102851L), MetaIdFactory.conceptId(0xd37e68cc7f44d7cL, 0x9f193484afb67d84L, 0x5e0d8461f90fc20fL), MetaIdFactory.conceptId(0xd37e68cc7f44d7cL, 0x9f193484afb67d84L, 0x5e0d8461f91477daL), MetaIdFactory.conceptId(0xd37e68cc7f44d7cL, 0x9f193484afb67d84L, 0x5e0d8461f91480f7L), MetaIdFactory.conceptId(0xd37e68cc7f44d7cL, 0x9f193484afb67d84L, 0x5e0d8461f9147e1dL), MetaIdFactory.conceptId(0xd37e68cc7f44d7cL, 0x9f193484afb67d84L, 0x5e0d8461f9147c60L), MetaIdFactory.conceptId(0xd37e68cc7f44d7cL, 0x9f193484afb67d84L, 0x5e0d8461f9148299L), MetaIdFactory.conceptId(0xd37e68cc7f44d7cL, 0x9f193484afb67d84L, 0x5e0d8461f90fc063L), MetaIdFactory.conceptId(0xd37e68cc7f44d7cL, 0x9f193484afb67d84L, 0x5e0d8461f90fc151L), MetaIdFactory.conceptId(0xd37e68cc7f44d7cL, 0x9f193484afb67d84L, 0x5e0d8461f9147ab1L), MetaIdFactory.conceptId(0xd37e68cc7f44d7cL, 0x9f193484afb67d84L, 0x5e0d8461f90fbf4dL)).seal();
}
