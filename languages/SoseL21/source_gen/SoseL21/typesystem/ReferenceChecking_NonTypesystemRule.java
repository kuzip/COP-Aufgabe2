package SoseL21.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class ReferenceChecking_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public ReferenceChecking_NonTypesystemRule() {
  }
  public void applyRule(final SNode reference, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode tmp = SNodeOperations.getNextSibling(reference);
    while (tmp != null) {
      if (SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(tmp, CONCEPTS.Reference$hR), LINKS.variable$g5Wo), PROPS.name$MnvL) == SPropertyOperations.getString(SLinkOperations.getTarget(reference, LINKS.variable$g5Wo), PROPS.name$MnvL)) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(tmp, "reference to the same variable twice isn't allowed", "r:7f04aede-d885-4e05-9fd4-d5b4098ea18e(SoseL21.typesystem)", "2514538698345240563", null, errorTarget);
        }
      }
      tmp = SNodeOperations.getNextSibling(tmp);
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Reference$hR;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink variable$g5Wo = MetaAdapterFactory.getReferenceLink(0xd37e68cc7f44d7cL, 0x9f193484afb67d84L, 0x57b3245af39ac569L, 0x57b3245af39ac56aL, "variable");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Reference$hR = MetaAdapterFactory.getConcept(0xd37e68cc7f44d7cL, 0x9f193484afb67d84L, 0x57b3245af39ac569L, "SoseL21.structure.Reference");
  }
}
